import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import { readFileSync } from 'fs';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

// Plugin to inline text files (for schema.sql) and WASM files as base64
const inlineFilesPlugin = {
  name: 'inline-files',
  setup(build) {
    // Handle .sql files
    build.onLoad({ filter: /\.sql$/ }, async (args) => {
      const text = readFileSync(args.path, 'utf8');
      return {
        contents: `export default ${JSON.stringify(text)}`,
        loader: 'js',
      };
    });

    // Handle .wasm files as base64
    build.onLoad({ filter: /\.wasm$/ }, async (args) => {
      const buffer = readFileSync(args.path);
      const base64 = buffer.toString('base64');
      return {
        contents: `export default "${base64}"`,
        loader: 'js',
      };
    });
  },
};

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ['src/main.ts'],
  bundle: true,
  platform: 'browser',
  plugins: [inlineFilesPlugin],
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins,
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'main.js',
  minify: prod,
  define: {
    'process.versions.node': 'undefined',
  },
  alias: {
    react: 'preact/compat',
    'react-dom/test-utils': 'preact/test-utils',
    'react-dom': 'preact/compat',
    '#': './src',
  },
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
